<simple_statement> = STM
<complex_statement> = STM
<compound_statement> = STM
<item> = name_stm
<null> = null_stm
<assigment-statement> = assign
<procedure-statement> = procedure_call
<output-statement> = exit
<return-statement> = return
<go-to-statement> = goto
<entry-list> = entry_call
<stop-statement> = delay
<direct-code-statement> = code
<conditional-statement> = if
<test-statement> = case
<loop-statement> = LOOP
<block-list> = block
<exchange-statement> = accept, select
<conditional-statement> = cond_entry
<BEGIN> = begin
<END> = end
<variable> = var
<name_of_literal_item> = as_id_s, as_name, named_stm_id
<variant_part> = as_variant_s
<subscript> = as_object
<index-list> = as_choice
<literal-variable> = var_id
<numeric-variable> = var
<status-variable> = variant
<index-list> = variant_part
<literal-variable> = variant_s
<comments> = tx_comments
<formula> = EXP
<numeric-formula> = numeric_literal
<structured-entry-list> = aggregate
<overlay-list> = allocator
<CONVERT> = conversion
<BIT> = conversion
<BYTE> = conversion
<formula> = exp_s 
<literal-variable> = string_literal 
<declarator> = string_literal
<numeric-formula> = enum_literal_s
<description> = TYPE_SPEC
<numeric-constant> = integer
<array-declaration> = array
<file-declaration> = record
<input-statement> = access
<status-item-description> = derived
<TASK> = task_spec
<fixed-point-item-description> = fixed
<floating-point-item-description> = float
<function> = function
<name-of-procedure> = function_call
<actual-input-parameter-list> = as_param_s
<name-of-procedure> = as_name_void
<*parameter-list> = param_s, as_param_assoc
<identifier> = DESIGNATOR
<letter> = DESIGNATOR_CHAR
<name> = DEF_ID, entry_id, task_body_id, proc_id, pragma_id
<letter> = DEF_OCCURRENCE
<test-statement> = pragma, pragma_s

abort = <>
raise = <>
EXP_CONSTRAINED = formulas: <formula>
EXP_VOID = formulas: <formulas>
qualified = <>