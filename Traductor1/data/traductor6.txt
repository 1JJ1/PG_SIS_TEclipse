<statement> = STM
<labeled-statement> = name_stm
<assignment-expression> = assign
<expression-statement> = procedure_call
<jump-statement> = exit, return, goto, entry_call
<compound-statement> = code
<selection-statement> = if, case
<iteration-statement> = LOOP, block
<selection-statement> = select
<conditional-expression> = cond_entry
<primary-expression> = var, as_variant_s, as_object, as_choice, variant_s
<constant> = constant
<typedef-name> = as_id_s, var_id, variant, task_body_id, proc_id, pragma_id
<type-name> = as_name, variant_part, named_stm_id
<comments> = tx_comments
<struct-declarator> = EXP, EXP_VOID, exp_s
<external-declaration> = EXP_CONSTRAINED
<integer-constant> = numeric_literal
<struct-declarator-list> = aggregate
<specifier-qualifier> = allocator, conversion
<type-qualifier> = qualified
<string> = string_literal
<enumeration-list> = enum_literal_s
TYPE_SPEC = <type-specifier>
<integer-constant> = integer
<struct-declarator-list> = array
<storage-class-specifier> = record
<storage-class-specifier> = task_spec
<floating-constant> = float
<function-definition> = function
<declaration-specifier> = function_call, as_name_void
<parameter-declaration> = as_param_s
<parameter-list> = param_s
<parameter-type-list> = as_param_assoc
<direct-declarator> = DESIGNATOR
<character-constant> = DESIGNATOR_CHAR
<identifier> = DEF_ID, DEF_OCCURRENCE
<declarator> = entry_id
<pragma> = pragma 
<external-declaration> = pragma_s

null_stm
delay = <>
abort = <>
raise = <>
accept = <>
access = <>
derived = <>
fixed = <>