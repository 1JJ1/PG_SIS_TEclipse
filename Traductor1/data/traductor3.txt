STM = <statement>
name_stm = <labeled-statement>
null_stm = <labeled-statement>
assign = <assignment-expression>
procedure_call = <function-definition>
goto = <jump-statement>
return = <jump-statement>
code = <compound-statement>
if = <selection-statement>
case = <selection-statement>
LOOP = <iteration-statement>
block = <iteration-statement>
select = <conditional-expression>
cond_entry = <selection-statement>
var = <primary-expression> <constant>
as_id_s = <typedef-name>
as_name = <type-name>
as_variant_s = <primary-expression>
as_object = <primary-expression>
as_choice = <primary-expression>
var_id = <typedef-name>
variant = <typedef-name>
variant_part = <type-name>
variant_s = <primary-expression>
tx_comments = <comments>
EXP = <struct-declarator>
EXP_CONSTRAINED = <external-declaration>
EXP_VOID = <struct-declarator>
numeric_literal = <integer-constant>
aggregate = <struct-declarator-list>
allocator = <specifier-qualifier>
conversion = <specifier-qualifier>
qualified = <type-qualifier>
exp_s = <struct-declarator>
string_literal = <string>
enum_literal_s = <enumeration-list>
TYPE_SPEC = <type-specifier> <enum-specifier>
integer = <integer-constant>
array = <struct-declarator-list>
record = <storage-class-specifier>
task_spec = <storage-class-specifier>
float = <floating-constant>
function = <expression-statement>
function_call = <expression-statement>
as_param_s = <parameter-declaration>
as_name_void = <declaration-specifier>
param_s = <parameter-list>
as_param_assoc = <parameter-type-list>
DESIGNATOR = <direct-declarator>
DESIGNATOR_CHAR = <character-constant>
DEF_ID = <identifier>
DEF_OCCURRENCE = <identifier>
entry_id = <declarator>
task_body_id = <typedef-name>
proc_id = <typedef-name>
named_stm_id = <type-name>
pragma = <pragma>
pragma_id = <typedef-name> 
pragma_s = <external-declaration>
begin = <{>
end = <}>

//exit = <>
//entry_call = <>
//delay = <>
//abort = <>
//raise = <>
//accept = <>
//access = <>
//derived = <>
//fixed = <>